%%%% Copyright (C) 2005 -- 2014, Christopher Mark Gore,
%%%% Soli Deo Gloria,
%%%% All rights reserved.
%%%%
%%%% 2317 South River Road, Saint Charles, Missouri 63303 USA.
%%%% Web: http://cgore.com
%%%% Email: cgore@cgore.com
%%%%
%%%% Redistribution and use in source and binary forms, with or without
%%%% modification, are permitted provided that the following conditions are met:
%%%%
%%%%     * Redistributions of source code must retain the above copyright
%%%%       notice, this list of conditions and the following disclaimer.
%%%%
%%%%     * Redistributions in binary form must reproduce the above copyright
%%%%       notice, this list of conditions and the following disclaimer in the
%%%%       documentation and/or other materials provided with the distribution.
%%%%
%%%%     * Neither the name of Christopher Mark Gore nor the names of other
%%%%       contributors may be used to endorse or promote products derived from
%%%%       this software without specific prior written permission.
%%%%
%%%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%%%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%%%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%%%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%%%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%%%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%%%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%%%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%%%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%%%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%%%% POSSIBILITY OF SUCH DAMAGE.

\lispPackageChapter{sigma/sequence}

\section{Macros}

\lispMacroSubsection{arefable?}

\TODO

\lispMacroSubsection{nconcf}

\TODO

\lispMacroSubsection{nthable?}

\TODO

\lispMacroSubsection{set-nthcdr}

\TODO

\section{Functions}

\lispFunctionSubsection{array-values}

\TODO

\lispFunctionSubsection{nth-from-end}

\TODO

\lispFunctionSubsection{sequence?}

\TODO

\lispFunctionSubsection{empty-sequence?}

\TODO

\lispFunctionSubsection{join-symbol-to-all-following}

This function takes a symbol and a list, and for every occurance of the
symbol in the list, it joins it to the item following it.  For example:

\lispSyntax

\texttt{(join-symbol-to-all-following \lispVar{symbol} \lispVar{list})}

\lispExamples

\begin{lstlisting}
(join-symbol-to-all-following :# '(:# 10 :# 20 :# 30))
;; Returns '(:#10 :#20 :#30)
\end{lstlisting}

\lispAffectedBy

\texttt{*print-escape*},
\texttt{*print-radix*},
\texttt{*print-base*},
\texttt{*print-circle*},
\texttt{*print-pretty*},
\texttt{*print-level*},
\texttt{*print-length*},
\texttt{*print-case*},
\texttt{*print-gensym*},
\texttt{*print-array*}.

\lispFunctionSubsection{join-symbol-to-all-preceeding}

This function takes a symbol and a list, and for every occurance of the
symbol in the list, it joins it to the item preceeding it.  For example:

\lispSyntax

\texttt{(join-symbol-to-all-preceeding \lispVar{symbol} \lispVar{list})}

\lispExamples

\begin{lstlisting}
(join-symbol-to-all-preceeding :% '(10 :% 20 :% 30 :%))
;; Returns '(:10% :20% :30%)
\end{lstlisting}

\lispAffectedBy

\texttt{*print-escape*},
\texttt{*print-radix*},
\texttt{*print-base*},
\texttt{*print-circle*},
\texttt{*print-pretty*},
\texttt{*print-level*},
\texttt{*print-length*},
\texttt{*print-case*},
\texttt{*print-gensym*},
\texttt{*print-array*}.

\lispFunctionSubsection{list-to-vector}

\TODO

\lispFunctionSubsection{max*}

The \texttt{max*} function is a shortcut for \texttt{max}. It takes in one or
more lists and finds the maximum value within all of them. This is so you don't
have to manually use \texttt{apply} and \texttt{concatenate}.

\lispSyntax

\texttt{(min \&rest \lispVar{lists})}

\lispExamples

\begin{lstlisting}
(max* '(1 2 3 100 4 5)) ; Returns 100
(max* '(1 2 3 4)
      '(5 6 99 7)
      '(8 9 10)) ; Returns 99
\end{lstlisting}

\lispFunctionSubsection{min*}

The \texttt{min*} function is a shortcut for \texttt{min}. It takes in one or
more lists and finds the maximum value within all of them. This is so you don't
have to manually use \texttt{apply} and \texttt{concatenate}.

\lispSyntax

\texttt{(min \&rest \lispVar{lists})}

\lispExamples

\begin{lstlisting}
(min* '(1 2 3 -100 4 5)) ; Returns -100
(min* '(1 2 3 4)
      '(5 6 -99 7)
      '(8 9 10)) ; Returns -99
\end{lstlisting}

\lispFunctionSubsection{set-equal}

\TODO

\lispFunctionSubsection{simple-vector-to-list}

\TODO

\lispFunctionSubsection{sort-order}

\TODO

\lispFunctionSubsection{the-last}

\TODO

\lispFunctionSubsection{vector-to-list}

\TODO

\section{Generics}

\lispGenericSubsection{best}

\TODO

\lispGenericSubsection{minimum}

\TODO

\lispGenericSubsection{minimum?}

\TODO

\lispGenericSubsection{maximum}

\TODO

\lispGenericSubsection{maximum?}

\TODO

\lispGenericSubsection{sort-on}

\TODO

\lispGenericSubsection{slice}

\TODO

\lispGenericSubsection{split}

\TODO

\lispGenericSubsection{worst}

\TODO
