%%%% Copyright (C) 2005 -- 2021, Christopher Mark Gore,
%%%% Soli Deo Gloria,
%%%% All rights reserved.
%%%%
%%%% 22 Forest Glade Court, Saint Charles, Missouri 63304 USA.
%%%% Web: http://cgore.com
%%%% Email: cgore@cgore.com
%%%%
%%%% Redistribution and use in source and binary forms, with or without
%%%% modification, are permitted provided that the following conditions are met:
%%%%
%%%%     * Redistributions of source code must retain the above copyright
%%%%       notice, this list of conditions and the following disclaimer.
%%%%
%%%%     * Redistributions in binary form must reproduce the above copyright
%%%%       notice, this list of conditions and the following disclaimer in the
%%%%       documentation and/or other materials provided with the distribution.
%%%%
%%%%     * Neither the name of Christopher Mark Gore nor the names of other
%%%%       contributors may be used to endorse or promote products derived from
%%%%       this software without specific prior written permission.
%%%%
%%%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%%%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%%%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%%%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%%%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%%%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%%%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%%%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%%%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%%%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%%%% POSSIBILITY OF SUCH DAMAGE.

\lispPackageChapter{sigma/behave}

The \texttt{sigma/behave} package contains some useful code for confirming
behavior of code, supporting a very basic form of \textit{behavior-driven
 development}, BDD.  The basic flow is to define the \textit{behavior} of
something, with multiple \textit{specs} specified within that behavior
specification, each consisting of various assertions, such as \texttt{should=},
\texttt{should-equal}, \texttt{should-not-equal}, and many others.  If the
behavior of the thing doesn't match the specified behavior, then there is some
error.

\section{Macros}

\lispMacroSubsection{behavior}

The \texttt{behavior} macro is used to specify a block of expected behavior for
a \texttt{thing}.  It specifies an example group, loosly similar to the
\texttt{describe} blocks in Ruby's RSpec.  It takes a single argument, the
\texttt{thing} we are trying to describe, and then a body of code to evaluate
that is evaluated in an implicit \texttt{progn}.  It is to be used around a set
of examples, or around a set of assertions directly.

\lispSyntax

\texttt{(behavior \lispVar{thing} \&body \lispVar{body})}

\lispArgs

\begin{description}
\item[\lispVar{thing}] This is what we are describing the behavior of.
\item[\lispVar{body}] This is an implicit proc to contain the behavior.
\end{description}

\lispExamples

\begin{lstlisting}
(behavior 'float
          (spec "is an Abelian group"
                (let ((a (random 10.0))
                      (b (random 10.0))
                      (c (random 10.0))
                      (e 1.0))
                  (spec "closure"
                        (should-be-a 'float (* a b)))
                  (spec "associativity"
                        (should= (* (* a b) c)
                                 (* a (* b c))))
                  (spec "identity element"
                        (should= a (* e a)))
                  (spec "inverse element"
                        (let ((1/a (/ 1 a)))
                          (should= (* 1/a a)
                                   (* a 1/a)
                                   1.0)))
                  (spec "commutitativity"
                        (should= (* a b) (* b a))))))
\end{lstlisting}

\lispMacroSubsection{spec}

The \texttt{spec} macro is used to indicate a specification for a desired
behavior.  It will normally serve as a grouping for assertions or nested
\texttt{spec}s.

\lispSyntax

\texttt{(spec \lispVar{description} \&body \lispVar{body})}

\lispArgs

\begin{description}
\item[\lispVar{description}] This is a string to describe the specification.
\item[\lispVar{body}] This is an implicit proc to contain the specification.
\end{description}

\lispExamples

\begin{lstlisting}
(spec "should pass some tests"
      (should= 12 (foo 3.5))
      (should= 14 (foo 4.22)))
\end{lstlisting}


\lispMacroSubsection{should}

The \texttt{should} macro is the basic building block for most of the behavior
checking.  It asserts that \texttt{test} returns truthfully for the arguments.
Typically you will want to use one of the macros defined on top of
\texttt{should} instead of using it directly, such as \texttt{should=}.

\lispSyntax

\texttt{(should \lispVar{test} \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{test}] This is the test predicate to evaluate.
\item[\lispVar{arguments}] These are the arguments to the test predicate.
\end{description}

\lispExamples

\begin{lstlisting}
(should #'= 12 (* 3 4)) ; Passes
(should #'< 4 (* 2 3))  ; Passes
(should #'< 4 5 6 7)    ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not}

The \texttt{should-not} macro is identical to the \texttt{should} macro, except
that it inverts the result of the call with \texttt{not}.

\lispSyntax

\texttt{(should-not \lispVar{test} \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{test}] This is the test predicate to evaluate.
\item[\lispVar{arguments}] These are the arguments to the test predicate.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not #'< 12 4)  ; Passes
(should-not #'= 12 44) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-be-null}

The \texttt{should-be-null} macro is a short-hand method for
 \texttt{(should \#'null \ldots)}.

\lispSyntax

\texttt{(should-be-null \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{null}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-be-null ())            ; Passes
(should-be-null nil)           ; Passes
(should-be-null (not 12))      ; Passes
(should-be-null (and t t nil)) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-be-true}

The \texttt{should-be-true} macro is a short-hand method for
\texttt{(should~\#'identity~\ldots)}.

\lispSyntax

\texttt{(should-be-true \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{identity}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-be-true t)               ; Passes
(should-be-true (not nil))       ; Passes
(should-be-true (or nil nil 12)) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-be-false}

The \texttt{should-be-false} macro is a short-hand method for
\texttt{(should \#'not \ldots)}.

\lispSyntax

\texttt{(should-be-false \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{not}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-be-false nil)
(should-be-false (not t))
(should-be-false (< 44 2))
\end{lstlisting}

\lispMacroSubsection{should-be-a}

The \texttt{should-be-a} macro specifies that one or more \texttt{things} should
be of the type specified by \texttt{type}.

\lispSyntax

\texttt{(should-be-a \lispVar{type} \&rest \lispVar{things})}

\lispArgs

\begin{description}
\item[\lispVar{type}] This is the type to compare with via \texttt{typep}.
\item[\lispVar{things}] These are the things to confirm the type of.
\end{description}

\begin{lstlisting}
(should-be-a 'integer 1)                 ; Passes
(should-be-a 'float 1)                   ; Passes
(should-be-a 'integer 1 2 3 4 5 6 7 8 9) ; Passes
(should-be-a 'integer 1.0)               ; Fails
\end{lstlisting}

\lispMacroSubsection{should=}

The \texttt{should=} macro is a short-hand method for
\texttt{(should \#'= \ldots)}.

\lispSyntax

\texttt{(should= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should= 12 12)   ; Passes
(should= 12 12.0) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not=}

The \texttt{should-not=} macro is a short-hand method for
\texttt{(should-not \#'= \ldots)}.

\lispSyntax

\texttt{(should-not= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not= 12 12)   ; Fails
(should-not= 12 12.0) ; Fails
(should-not= 12 14)   ; Passes
\end{lstlisting}

\lispMacroSubsection{should/=}

The \texttt{should/=} macro is a short-hand method for
\texttt{(should \#'/= \ldots)}.

\lispSyntax

\texttt{(should/= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{/=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should/= 12 13)   ; Passes
(should/= 12 12)   ; Fails
(should/= 12 12.0) ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not/=}

The \texttt{should-not/=} macro is a short-hand method for
\texttt{(should-not \#'/= \ldots)}.

\lispSyntax

\texttt{(should-not/= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{/=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not/= 12 13)   ; Fails
(should-not/= 12 12)   ; Passes
(should-not/= 12 12.0) ; Passes
\end{lstlisting}

\lispMacroSubsection{should<}

The \texttt{should<} macro is a short-hand method for
\texttt{(should \#'< \ldots)}.

\lispSyntax

\texttt{(should< \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{<}.
\end{description}

\lispExamples

\begin{lstlisting}
(should< 12 13) ; Passes
(should< 13 12) ; Fails
(should< 12 12) ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not<}

The \texttt{should-not<} macro is a short-hand method for
\texttt{(should-not \#'< \ldots)}.

\lispSyntax

\texttt{(should-not< \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{<}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not< 12 13) ; Passes
(should-not< 13 12) ; Fails
(should-not< 12 12) ; Fails
\end{lstlisting}

\lispMacroSubsection{should>}

The \texttt{should<} macro is a short-hand method for
\texttt{(should \#'> \ldots)}.

\lispSyntax

\texttt{(should> \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{>}.
\end{description}

\lispExamples

\begin{lstlisting}
(should> 12 13) ; Fails
(should> 13 12) ; Passes
(should> 12 12) ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not>}

The \texttt{should-not>} macro is a short-hand method for
\texttt{(should-not \#'> \ldots)}.

\lispSyntax

\texttt{(should-not> \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{>}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not> 12 13) ; Passes
(should-not> 13 12) ; Fails
(should-not> 12 12) ; Passes
\end{lstlisting}

\lispMacroSubsection{should<=}

The \texttt{should<=} macro is a short-hand method for
\texttt{(should \#'<= \ldots)}.

\lispSyntax

\texttt{(should<= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{<=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should<= 12 13) ; Passes
(should<= 13 12) ; Fails
(should<= 12 12) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not<=}

The \texttt{should-not<=} macro is a short-hand method for
\texttt{(should-not \#'<= \ldots)}.

\lispSyntax

\texttt{(should-not<= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{<=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not<= 12 13) ; Fails
(should-not<= 13 12) ; Passes
(should-not<= 12 12) ; Fails
\end{lstlisting}

\lispMacroSubsection{should>=}


The \texttt{should>=} macro is a short-hand method for
\texttt{(should \#'>= \ldots)}.

\lispSyntax

\texttt{(should>= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{>=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should>= 12 13) ; Fails
(should>= 13 12) ; Passes
(should>= 12 12) ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not>=}

The \texttt{should-not>=} macro is a short-hand method for
\texttt{(should-not \#'>= \ldots)}.

\lispSyntax

\texttt{(should-not>= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{>=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not>= 12 13) ; Passes
(should-not>= 13 12) ; Fails
(should-not>= 12 12) ; Fails
\end{lstlisting}

\lispMacroSubsection{should-eq}

The \texttt{should-eq} macro is a short-hand method for
\texttt{(should \#'eq \ldots)}.

\lispSyntax

\texttt{(should-eq \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{eq}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-eq 12 12)       ; Probably passes
(should-eq 13 12)       ; Fails
(should-eq "foo" "foo") ; May pass, may fail.
\end{lstlisting}

\lispMacroSubsection{should-not-eq}

The \texttt{should-not-eq} macro is a short-hand method for
\texttt{(should-not \#'eq \ldots)}.

\lispSyntax

\texttt{(should-not-eq \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{eq}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-eq 12 12)       ; Probably fails
(should-not-eq 13 12)       ; Passes
(should-not-eq "foo" "foo") ; May pass, may fail.
\end{lstlisting}

\lispMacroSubsection{should-eql}

The \texttt{should-eql} macro is a short-hand method for
\texttt{(should \#'eql \ldots)}.

\lispSyntax

\texttt{(should-eql \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{eql}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-eql 12 12)       ; Passes
(should-eql 13 12)       ; Fails
(should-eql "foo" "foo") ; May pass, may fail.
\end{lstlisting}

\lispMacroSubsection{should-not-eql}

The \texttt{should-not-eql} macro is a short-hand method for
\texttt{(should-not \#'eql \ldots)}.

\lispSyntax

\texttt{(should-not-eql \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{eql}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-eql 12 12)       ; Fails
(should-not-eql 13 12)       ; Passes
(should-not-eql "foo" "foo") ; May pass, may fail.
\end{lstlisting}

\lispMacroSubsection{should-equal}

The \texttt{should-equal} macro is a short-hand method for
\texttt{(should \#'equal \ldots)}.

\lispSyntax

\texttt{(should-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-equal 12 12)       ; Passes
(should-equal 13 12)       ; Fails
(should-equal "foo" "foo") ; Passes
(should-equal "FOO" "foo") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-equal}

The \texttt{should-not-equal} macro is a short-hand method for
\texttt{(should-not \#'equal \ldots)}.

\lispSyntax

\texttt{(should-not-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-equal 12 12)       ; Passes
(should-not-equal 13 12)       ; Fails
(should-not-equal "foo" "foo") ; Fails
(should-not-equal "FOO" "foo") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-equalp}

The \texttt{should-equalp} macro is a short-hand method for
\texttt{(should \#'equalp \ldots)}.

\lispSyntax

\texttt{(should-equalp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{equalp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-equalp 12 12)       ; Passes
(should-equalp 13 12)       ; Fails
(should-equalp "foo" "foo") ; Passes
(should-equalp "FOO" "foo") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-equalp}

The \texttt{should-not-equalp} macro is a short-hand method for
\texttt{(should-not \#'equalp \ldots)}.

\lispSyntax

\texttt{(should-not-equalp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{equalp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-equalp 12 12)       ; Passes
(should-not-equalp 13 12)       ; Fails
(should-not-equalp "foo" "foo") ; Passes
(should-not-equalp "FOO" "foo") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string=}

The \texttt{should-string=} macro is a short-hand method for
\texttt{(should \#'string= \ldots)}.

\lispSyntax

\texttt{(should-string= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string= "foo" "foo") ; Passes
(should-string= "FOO" "foo") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string=}

The \texttt{should-not-string=} macro is a short-hand method for
\texttt{(should-not \#'string= \ldots)}.

\lispSyntax

\texttt{(should-not-string= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string= "foo" "foo") ; Fails
(should-not-string= "FOO" "foo") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-string/=}

The \texttt{should-string/=} macro is a short-hand method for
\texttt{(should \#'string/= \ldots)}.

\lispSyntax

\texttt{(should-string/= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string/=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string/= "foo" "foo") ; Fails
(should-string/= "FOO" "foo") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string/=}

The \texttt{should-not-string/=} macro is a short-hand method for
\texttt{(should-not \#'string/= \ldots)}.

\lispSyntax

\texttt{(should-not-string/= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string/=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string/= "foo" "foo") ; Passes
(should-not-string/= "FOO" "foo") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string<}

The \texttt{should-string<} macro is a short-hand method for
\texttt{(should \#'string< \ldots)}.

\lispSyntax

\texttt{(should-string< \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string<}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string< "foo" "f")      ; Fails
(should-string< "foo" "foo")    ; Fails
(should-string< "foo" "FOOBAR") ; Fails
(should-string< "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string<}

The \texttt{should-not-string<} macro is a short-hand method for
\texttt{(should-not \#'string< \ldots)}.

\lispSyntax

\texttt{(should-not-string< \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string<}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string< "foo" "f")      ; Passes
(should-not-string< "foo" "foo")    ; Passes
(should-not-string< "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string>}

The \texttt{should-string>} macro is a short-hand method for
\texttt{(should \#'string> \ldots)}.

\lispSyntax

\texttt{(should-string> \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string>}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string> "foo" "f")      ; Passes
(should-string> "foo" "foo")    ; Fails
(should-string> "foo" "FOO")    ; Passes
(should-string> "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string>}

The \texttt{should-not-string>} macro is a short-hand method for
\texttt{(should-not \#'string> \ldots)}.

\lispSyntax

\texttt{(should-not-string> \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string>}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string> "foo" "f")      ; Fails
(should-not-string> "foo" "foo")    ; Passes
(should-not-string> "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-string<=}

The \texttt{should-string<=} macro is a short-hand method for
\texttt{(should \#'string<= \ldots)}.

\lispSyntax

\texttt{(should-string<= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string<=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string<= "foo" "f")      ; Fails
(should-string<= "foo" "foo")    ; Passes
(should-string<= "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string<=}

The \texttt{should-not-string<=} macro is a short-hand method for
\texttt{(should-not~\#'string<=~\ldots)}.

\lispSyntax

\texttt{(should-not-string<= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string<=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string<= "foo" "f")      ; Passes
(should-not-string<= "foo" "foo")    ; Fails
(should-not-string<= "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string>=}

The \texttt{should-string>=} macro is a short-hand method for
\texttt{(should \#'string>= \ldots)}.

\lispSyntax

\texttt{(should-string>= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string>=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string>= "foo" "f")      ; Passes
(should-string>= "foo" "foo")    ; Passes
(should-string>= "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string>=}

The \texttt{should-not-string>=} macro is a short-hand method for
\texttt{(should-not \#'string>= \ldots)}.

\lispSyntax

\texttt{(should-not-string>= \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string>=}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string>= "foo" "f")      ; Fails
(should-not-string>= "foo" "foo")    ; Fails
(should-not-string>= "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-string-equal}

The \texttt{should-string-equal} macro is a short-hand method for
\texttt{(should \#'string-equal~\ldots)}.

\lispSyntax

\texttt{(should-string-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-equal "foo" "foo")    ; Passes
(should-string-equal "FOO" "foo")    ; Passes
(should-string-equal "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string-equal}

The \texttt{should-not-string-equal} macro is a short-hand method for
\texttt{(should-not \#'string-equal \ldots)}.

\lispSyntax

\texttt{(should-not-string-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-equal "foo" "foo")    ; Fails
(should-not-string-equal "FOO" "foo")    ; Fails
(should-not-string-equal "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-string-not-equal}

The \texttt{should-string-not-equal} macro is a short-hand method for
\texttt{(should \#'string-not-equal \ldots)}.

\lispSyntax

\texttt{(should-string-not-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-not-equal "foo" "foo")    ; Fails
(should-string-not-equal "FOO" "foo")    ; Fails
(should-string-not-equal "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string-not-equal}

The \texttt{should-not-string-not-equal} macro is a short-hand method for
\texttt{(should-not \#'string-not-equal \ldots)}.

\lispSyntax

\texttt{(should-not-string-not-equal \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-equal}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-not-equal "foo" "foo")    ; Passes
(should-not-string-not-equal "FOO" "foo")    ; Passes
(should-not-string-not-equal "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string-lessp}

The \texttt{should-string-lessp} macro is a short-hand method for
\texttt{(should \#'string-lessp \ldots)}.

\lispSyntax

\texttt{(should-string-lessp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-lessp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-lessp "foo" "f")      ; Fails
(should-string-lessp "foo" "foo")    ; Fails
(should-string-lessp "foo" "FOOBAR") ; Passes
(should-string-lessp "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string-lessp}

The \texttt{should-not-string-lessp} macro is a short-hand method for
\texttt{(should-not \#'string-lessp \ldots)}.

\lispSyntax

\texttt{(should-not-string-lessp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-lessp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-lessp "foo" "f")      ; Passes
(should-not-string-lessp "foo" "foo")    ; Passes
(should-not-string-lessp "foo" "FOOBAR") ; Fails
(should-not-string-lessp "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string-greaterp}

The \texttt{should-string-greaterp} macro is a short-hand method for
\texttt{(should \#'string-greaterp \ldots)}.

\lispSyntax

\texttt{(should-string-greaterp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-greaterp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-greaterp "foo" "f")      ; Passes
(should-string-greaterp "foo" "foo")    ; Fails
(should-string-greaterp "foo" "FOO")    ; Fails
(should-string-greaterp "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string-greaterp}

The \texttt{should-not-string-greaterp} macro is a short-hand method for
\texttt{(should-not \#'string-greaterp \ldots)}.

\lispSyntax

\texttt{(should-not-string-greaterp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-greaterp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-greaterp "foo" "f")      ; Fails
(should-not-string-greaterp "foo" "foo")    ; Passes
(should-not-string-greaterp "foo" "FOO")    ; Passes
(should-not-string-greaterp "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-string-not-greaterp}

The \texttt{should-string-not-greaterp} macro is a short-hand method for
\texttt{(should \#'string-not-greaterp \ldots)}.

\lispSyntax

\texttt{(should-string-not-greaterp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-greaterp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-not-greaterp "foo" "f")      ; Fails
(should-string-not-greaterp "foo" "foo")    ; Passes
(should-string-not-greaterp "foo" "FOO")    ; Passes
(should-string-not-greaterp "foo" "foobar") ; Passes
\end{lstlisting}

\lispMacroSubsection{should-not-string-not-greaterp}

The \texttt{should-not-string-not-greaterp} macro is a short-hand method for
\texttt{(should-not \#'string-not-greaterp \ldots)}.

\lispSyntax

\texttt{(should-not-string-not-greaterp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-greaterp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-not-greaterp "foo" "f")      ; Passes
(should-not-string-not-greaterp "foo" "foo")    ; Fails
(should-not-string-not-greaterp "foo" "FOO")    ; Fails
(should-not-string-not-greaterp "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-string-not-lessp}

The \texttt{should-string-not-lessp} macro is a short-hand method for
\texttt{(should \#'string-not-lessp \ldots)}.

\lispSyntax

\texttt{(should-string-not-lessp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-lessp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-string-not-lessp "foo" "f")      ; Passes
(should-string-not-lessp "foo" "foo")    ; Passes
(should-string-not-lessp "foo" "FOOBAR") ; Fails
(should-string-not-lessp "foo" "foobar") ; Fails
\end{lstlisting}

\lispMacroSubsection{should-not-string-not-lessp}

The \texttt{should-not-string-not-lessp} macro is a short-hand method for
\texttt{(should-not \#'string-not-lessp \ldots)}.

\lispSyntax

\texttt{(should-not-string-not-lessp \&rest \lispVar{arguments})}

\lispArgs

\begin{description}
\item[\lispVar{arguments}] These are the arguments to \texttt{string-not-lessp}.
\end{description}

\lispExamples

\begin{lstlisting}
(should-not-string-not-lessp "foo" "f")      ; Fails
(should-not-string-not-lessp "foo" "foo")    ; Fails
(should-not-string-not-lessp "foo" "FOOBAR") ; Passes
(should-not-string-not-lessp "foo" "foobar") ; Passes
\end{lstlisting}
