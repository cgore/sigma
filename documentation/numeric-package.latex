%%%% Copyright (C) 2005 -- 2021, Christopher Mark Gore,
%%%% Soli Deo Gloria,
%%%% All rights reserved.
%%%%
%%%% 22 Forest Glade Court, Saint Charles, Missouri 63304 USA.
%%%% Web: http://cgore.com
%%%% Email: cgore@cgore.com
%%%%
%%%% Redistribution and use in source and binary forms, with or without
%%%% modification, are permitted provided that the following conditions are met:
%%%%
%%%%     * Redistributions of source code must retain the above copyright
%%%%       notice, this list of conditions and the following disclaimer.
%%%%
%%%%     * Redistributions in binary form must reproduce the above copyright
%%%%       notice, this list of conditions and the following disclaimer in the
%%%%       documentation and/or other materials provided with the distribution.
%%%%
%%%%     * Neither the name of Christopher Mark Gore nor the names of other
%%%%       contributors may be used to endorse or promote products derived from
%%%%       this software without specific prior written permission.
%%%%
%%%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%%%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%%%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%%%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%%%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%%%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%%%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%%%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%%%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%%%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%%%% POSSIBILITY OF SUCH DAMAGE.

\lispPackageChapter{sigma/numeric}

\section{Macros}

\lispMacroSubsection{+f}

The \texttt{+f} macro is an alias for \texttt{incf}.

\lispMacroSubsection{-f}

The \texttt{-f} macro is an alias for \texttt{decf}.

\lispMacroSubsection{*f}

The \texttt{*f} macro is an alias for \texttt{multf}.

\lispMacroSubsection{/f}

The \texttt{/f} macro is an alias for \texttt{divf}.

\lispMacroSubsection{divf}

The \texttt{divf} macro is divide-and-store, along the lines of \texttt{incf}
and \texttt{decf}, but with division instead.  This is similar to
\texttt{x /= \textit{something}} in the C programming language.

\lispSyntax

\texttt{(divf \lispVar{variable} \&rest \lispVar{arguments})}

\lispExamples

\begin{lstlisting}
;;; Prints 65536 ... %*$\cdots$*) 8 ... 4 ... 2 ... 1 ... 0 ... that's it!
(let ((x (expt 2 16)))
  (while (<= 0 x)
    (format t "~A ... " x)
    (divf x 2)))
(format t " that's it!~%")
\end{lstlisting}

\lispMacroSubsection{f+}

The \texttt{f+} macro is similar to \texttt{incf} or \texttt{+f}, but it is a
post-increment instead of a pre-increment.  That is, \texttt{f+} works like
\texttt{x++} in C but \texttt{incf} and \texttt{+f} work like \texttt{++x} in C.

\lispSyntax

\texttt{(f+ \lispVar{variable} \&rest \lispVar{addends})}

\lispExamples

\begin{lstlisting}
(let ((x 12))
  (list x (f+ x) x)) ; Returns '(12 12 13).
\end{lstlisting}

\lispMacroSubsection{f-}

The \texttt{f-} macro is similar to \texttt{decf} or \texttt{-f}, but it is a
post-decrement instead of a pre-decrement.  That is, \texttt{f-} works like
\texttt{x--} in C but \texttt{decf} and \texttt{-f} work like \texttt{--x} in C.

\lispSyntax

\texttt{(f- \lispVar{variable} \&rest \lispVar{subtrahends})}

\lispExamples

\begin{lstlisting}
(let ((x 12))
  (list x (f- x) x)) ; Returns '(12 12 11).
\end{lstlisting}

\lispMacroSubsection{f*}

The \texttt{f*} macro is similar to \texttt{multf} or \texttt{*f}, but it is a
post-multiply instead of a pre-multiply. That is, \texttt{f*} works like
\texttt{x++} in C (just for multiplication instead of addition) but
\texttt{multf} and \texttt{*f} work like \texttt{++x} in C (again, just for
multiplication instead of addition.)

\lispSyntax

\texttt{(f* \lispVar{variable} \&rest \lispVar{multiplicands})}

\lispExamples

\begin{lstlisting}
(let ((x 12))
  (list x (f* x 2) x)) ; Returns '(12 12 24).
\end{lstlisting}

\lispMacroSubsection{f/}

The \texttt{f/} macro is similar to \texttt{divf} or \texttt{/f}, but it is a
post-divide instead of a pre-divide. That is, \texttt{f/} works like
\texttt{x++} in C (just for division instead of addition) but \texttt{divf} and
\texttt{/f} work like \texttt{++x} in C (again, just for division instead of
addition.)

\lispSyntax

\texttt{(f/ \lispVar{variable} \&rest \lispVar{divisors})}

\lispExamples

\begin{lstlisting}
(let ((x 12))
  (list x (f/ x 2) x)) ; Returns '(12 12 6).
\end{lstlisting}

\lispMacroSubsection{multf}

The \texttt{divf} macro is multiply-and-store, along the lines of \texttt{incf}
and \texttt{decf}, but with multiplication instead.  This is similar to
\texttt{x *= \textit{something}} in the C programming language.

\lispSyntax

\texttt{(multf \lispVar{variable} \&rest \lispVar{arguments})}

\lispExamples

\begin{lstlisting}
;;; Prints 1 ... 2 ... 4 ... 8 ... %*$\cdots$*) ... 65535 ... that's it!
(let ((x 1))
  (while (<= x (expt 2 16))
    (format t "~A ... " x)
    (multf x 2)))
(format t " that's it!~%")
\end{lstlisting}

\section{Functions}

\lispFunctionSubsection{bit?}

\TODO

\lispFunctionSubsection{choose}

The \lispVar{choose} function computes the binomial coefficient for $n$ and $k$,
typically spoken as \textit{n choose k}, and usually written mathematically as
$n \choose k$.

\lispFunctionSubsection{factorial}

The \lispVar{factorial} function computes $n!$ for positive integers.  NB, this
isn't intelligent, and uses a loop instead of better approaches.

\lispFunctionSubsection{fractional-part}

\TODO

\lispFunctionSubsection{fractional-value}

\TODO

\lispFunctionSubsection{integer-range}

\TODO

\lispFunctionSubsection{nonnegative?}

\TODO

\lispFunctionSubsection{nonnegative-integer?}

\TODO

\lispFunctionSubsection{positive-integer?}

\TODO

\lispFunctionSubsection{product}

\TODO

\lispFunctionSubsection{sum}

\TODO

\lispFunctionSubsection{unsigned-integer?}

\TODO

\section{Types}

\lispTypeSubsection{nonnegative-float}

\TODO

\lispTypeSubsection{nonnegative-integer}

\TODO

\lispTypeSubsection{positive-float}

\TODO

\lispTypeSubsection{positive-integer}

\TODO
