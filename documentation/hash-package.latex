%%%% Copyright (C) 2005 -- 2021, Christopher Mark Gore,
%%%% Soli Deo Gloria,
%%%% All rights reserved.
%%%%
%%%% 22 Forest Glade Court, Saint Charles, Missouri 63304 USA.
%%%% Web: http://cgore.com
%%%% Email: cgore@cgore.com
%%%%
%%%% Redistribution and use in source and binary forms, with or without
%%%% modification, are permitted provided that the following conditions are met:
%%%%
%%%%     * Redistributions of source code must retain the above copyright
%%%%       notice, this list of conditions and the following disclaimer.
%%%%
%%%%     * Redistributions in binary form must reproduce the above copyright
%%%%       notice, this list of conditions and the following disclaimer in the
%%%%       documentation and/or other materials provided with the distribution.
%%%%
%%%%     * Neither the name of Christopher Mark Gore nor the names of other
%%%%       contributors may be used to endorse or promote products derived from
%%%%       this software without specific prior written permission.
%%%%
%%%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%%%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%%%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%%%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%%%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%%%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%%%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%%%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%%%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%%%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%%%% POSSIBILITY OF SUCH DAMAGE.

\lispPackageChapter{sigma/hash}

\section{Macros}

\lispMacroSubsection{sethash}

The \texttt{sethash} macro is shortcut for \texttt{setf gethash}.

\section{Functions}

\lispFunctionSubsection{populate-hash-table}

The \texttt{populate-hash-table} function makes initial construction of hash
tables a lot easier, just taking in key/value pairs as the arguments to the
function, and returning a newly-constructed hash table.

\lispExamples

\begin{lstlisting}
(populate-hash-table 'name "Valentinus"
                     'likes '(birds roses)
                     'dislikes '(beheadings epilepsy "false idols")
                     'died 269)
\end{lstlisting}

\lispFunctionSubsection{inchash}

The \texttt{inchash} function will increment the value in \lispVar{key} of the
\lispVar{hash}, initializing it to $1$ if it isn't currently defined.

\lispFunctionSubsection{dechash}

The \texttt{dechash} function will decrement the value in \lispVar{key} of the
\lispVar{hash}, initializing it to $-1$ if it isn't currently defined.

\lispFunctionSubsection{gethash-in}

The \texttt{gethash-in} function works like \texttt{gethash}, but allows for
multiple keys to be specified at once, to work with nested hash tables.

\lispSyntax

\texttt{(gethash-in \lispVar{keys} \lispVar{hash-table} \&optional
  \lispVar{default})}

\lispArgs

\begin{description}
\item[\lispVar{keys}] A list of objects.
\item[\lispVar{hash-table}] A hash table.
\item[\lispVar{default}] An object.  The default is nil.
\end{description}

\lispReturns

\begin{description}
\item[\lispVar{value}] An object.
\item[\lispVar{present?}] A generalized boolean.
\end{description}

\lispExamples

\begin{lstlisting}
(let ((h (make-hash-table)))
  (sethash 'a h 12)
  (gethash-in '(a) h)) ; Returns 12

(let ((h (make-hash-table))
      (i (make-hash-table)))
  (sethash 'b i 123)
  (sethash 'a h i)
  (gethash-in '(a b) h 123)) ; Returns 123
\end{lstlisting}
