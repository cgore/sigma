%%%% Copyright (C) 2005 -- 2013, Christopher Mark Gore,
%%%% Soli Deo Gloria,
%%%% All rights reserved.
%%%%
%%%% 8729 Lower Marine Road, Saint Jacob, Illinois 62281 USA.
%%%% Web: http://cgore.com
%%%% Email: cgore@cgore.com
%%%%
%%%% Redistribution and use in source and binary forms, with or without
%%%% modification, are permitted provided that the following conditions are met:
%%%%
%%%%     * Redistributions of source code must retain the above copyright
%%%%       notice, this list of conditions and the following disclaimer.
%%%%
%%%%     * Redistributions in binary form must reproduce the above copyright
%%%%       notice, this list of conditions and the following disclaimer in the
%%%%       documentation and/or other materials provided with the distribution.
%%%%
%%%%     * Neither the name of Christopher Mark Gore nor the names of other
%%%%       contributors may be used to endorse or promote products derived from
%%%%       this software without specific prior written permission.
%%%%
%%%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
%%%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
%%%% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
%%%% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
%%%% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
%%%% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
%%%% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
%%%% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
%%%% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
%%%% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%%%% POSSIBILITY OF SUCH DAMAGE.

\lispPackageChapter{Sigma/Control}

The \texttt{sigma/control} package contains code for basic program control
systems.  These are mostly basic macros to add more complicated looping,
conditionals, or similar.  These are typically extensions to Common Lisp that
are inspired by other programming languages.  Thanks to the power of Common Lisp
and its macro system, we can typically implement most features of any other
language with little trouble.

\section{Macros}

\lispMacroSubsection{AIf}

The \texttt{aif} macro is an anaphoric variation of the built-in \texttt{if}
control structure.  This is based on \cite[p.~190]{on-lisp}.  The basic idea is
to provide an anaphor (such as pronouns in English) for the conditional so that
it can easily be referred to within the body of the conditional expression.  The
most natural pronoun in the English language for a thing is ``it'', so that is
what is used.  If you need or want to use a different anaphor, use
\texttt{a?if}.  The most common use of \texttt{aif} is for when you want to do
some additional computation with some time-consuming calculation, but only if it
returned successfully.

\lispSyntax

\texttt{(aif \lispVar{conditional} \lispVar{t-action} \&optional \lispVar{nil-action})}

\lispArgs

\begin{description}
\item[\lispVar{Conditional}] The boolean conditional to select between the
  \lispVar{t-action} and the \lispVar{nil-action}.
\item[\lispVar{T-Action}] The action to evaluate if the \lispVar{conditional}
  evaluate as true.
\item[\lispVar{Nil-Action}] The action to evaluate if the \lispVar{conditional}
  evaluates as nil.
\end{description}

\lispExamples

\begin{verbatim}
(aif (big-long-calculation)
     (foo it)
     (format t "The big-long-calculation failed!~%"))
\end{verbatim}

This is similar to the following, but with less typing:

\begin{verbatim}
(let ((it (big-long-calculation)))
  (if it
      (foo it)
      (format t "The big-long-calculation failed!~%")))
\end{verbatim}

Or say you need to get a user name from a database call, which might be slow.

\begin{verbatim}
(aif (get-user-name)
     (format -t "Hello, ~A!~%" it)
     (format -t "You aren't logged in, go away!~%"))
\end{verbatim}

\lispMacroSubsection{A?If}

The \texttt{a?if} macro is a variation of \texttt{aif} that allows for the
specification of the anaphor to use, instead of being restricted to just
\texttt{it}, the default with \texttt{aif}.  This is most often useful when you
need to nest calls to anaphoric macros.

\lispSyntax

\texttt{(a?if \lispVar{anaphor} \lispVar{conditional} \lispVar{t-action}
  \&optional \lispVar{nil-action})}

\lispArgs

\begin{description}
\item[\lispVar{Anaphor}] The result of the \lispVar{conditional} will be stored
  in the variable specified as the anaphor.
\item[\lispVar{Conditional}] The boolean conditional to select between the
  \lispVar{t-action} and the \lispVar{nil-action}.
\item[\lispVar{T-Action}] The action to evaluate if the \lispVar{conditional}
  evaluate as true.
\item[\lispVar{Nil-Action}] The action to evaluate if the \lispVar{conditional}
  evaluates as nil.
\end{description}

\lispExamples

\begin{verbatim}
(a?if foo 'outer
  (a?if bar 'inner
    `(,foo ,bar))) ; Returns '(outer inner)
\end{verbatim}

\lispMacroSubsection{AAnd}

The \texttt{aand} macro is an anaphoric variation of the built-in \texttt{and}.
This is based on \cite[p.~191]{on-lisp}.  It works in a similar manner to
\texttt{aif}, defining \texttt{it} as the current argument for use in the next
argument, reassigning \texttt{it} with each argument.

\lispSyntax

\texttt{(aand \&rest arguments)}

\lispExamples

\begin{verbatim}
(aand 2         ; Sets 'it' to 2.
      (* 3 it)  ; Sets 'it' to 6.
      (* 4 it)) ; Returns 24.
\end{verbatim}

\lispMacroSubsection{A?And}

The \texttt{a?and} macro is a variant of \texttt{aand} that allows for the
specification of the anaphor to use, instead of being restricted to just
\texttt{it}, the default with \texttt{aand}.  This is most often useful when you
need to nest calls to anaphoric macros.

\lispExamples

\begin{verbatim}
(a?and foo 12 (* 2 foo) (* 3 foo)) ; Returns 72.

(a?and foo 1 2 3 'outer
  (a?and bar 4 5 6 'inner `(,foo ,bar))) ; Returns '(outer inner)
\end{verbatim}

\lispMacroSubsection{ALambda}

The \texttt{alambda} macro is an anaphoric variant of the built-in
\texttt{lambda}.  This is based on \cite[p.~193]{on-lisp}.  It works in a
similar manner to \texttt{aif} and \texttt{aand}, except it defines
\texttt{self} instead of \texttt{it} as the default anaphor.  This is useful so
that you can write recursive lambdas.


\begin{verbatim}
(funcall (alambda (x) ; Simple recursive factorial example.
           (if (<= x 0)
               1
               (* x (self (1- x)))))
         10))) ; Calculates 10!, inefficently.
\end{verbatim}

\lispMacroSubsection{A?Lambda}


The \texttt{a?lambda} macro is an variant of \texttt{alambda} that allows you to
specify the anaphor to use, instead of just the default of \texttt{it}.

\begin{verbatim}
(funcall (a?lambda ! (x) ; Simple recursive factorial example.
           (if (<= x 0)
               1
               (* x (! (1- x)))))
         10))) ; Calculates 10!, inefficently.
\end{verbatim}

\lispMacroSubsection{ABlock}

The \texttt{ablock} macro is an anaphoric variant of the built-in
\texttt{block}.  This is based on \cite[p.~193]{on-lisp}.  It works in a similar
manner to \texttt{aand}, defining the anaphor \texttt{it} for each argument to
the block.

\lispExamples

\begin{verbatim}
(let (w x y z)
   (ablock b
           (setf w 7)
           (setf x (* 2 it)) ; Twice w, 14.
           (setf y (* 3 it)) ; Thrice x, 42.
           (return-from b)   ; Leave the block.
           (setf z 123))     ; Never happens.
   (list w x y z))           ; Returns '(7 14 42 nil)
\end{verbatim}

\lispMacroSubsection{A?Block}

The \texttt{a?block} macro is an anaphoric variant of \texttt{ablock} that
allows you to specify the anaphor to use, instead of just the default of
\texttt{it}.

\lispExamples

\begin{verbatim}
(let (w x y z)
   (a?block b foo
            (setf w 7)
            (setf x (* 2 foo)) ; Twice w, 14.
            (setf y (* 3 foo)) ; Thrice x, 42.
            (return-from b)    ; Leave the block.
            (setf z 123))      ; Never happens.
   (list w x y z))             ; Returns '(7 14 42 nil)
\end{verbatim}

\lispMacroSubsection{ACond}

The \texttt{acond} macro is an anaphoric variant of the built-in
\texttt{cond}.  This is based on \cite[p.~191]{on-lisp}.  It works in a similar
manner to \texttt{aand}, defining the anaphor \texttt{it} for each argument to
the conditional.

\lispExamples

\begin{verbatim}
(let (a b (c 3))
  (acond (a it)         ; No.
         (b it)         ; No.
         (c (* 4 it)))) ; Yes, returns 12 = 4*3, the value of c.
\end{verbatim}

\lispMacroSubsection{A?Cond}

The \texttt{a?cond} macro is an anaphoric variant of \texttt{acond} that
allows you to specify the anaphor to use, instead of just the default of
\texttt{it}.

\lispExamples

\begin{verbatim}
(let (a b (c 3))
  (a?cond foo
          (a foo)         ; No.
          (b foo)         ; No.
          (c (* 4 foo)))) ; Yes, returns 12 = 4*3, the value of c.
\end{verbatim}

\lispMacroSubsection{AWhen}

The \texttt{awhen} macro is an anaphoric variant of \texttt{when} built-in.
This is based on \cite[p.~191]{on-lisp}.  It works in a similar manner to
\texttt{aif}, defining \texttt{it} as the default anaphor.  This is useful when
the conditional is the result of a complicated computation, so you don't have to
compute it twice or wrap the computation in a let block yourself.

\lispSyntax

\texttt{(awhen \lispVar{conditional} \&body \lispVar{body})}

\lispExamples

\begin{verbatim}
(awhen (get-user-name)
  (do-something-with-name it)
  (do-more-stuff)
  (format -t "Hello, ~A!~%" it))
\end{verbatim}

\lispMacroSubsection{A?When}

The \texttt{a?when} macro is similar to the \texttt{awhen}, except that it
allows you to specify the anaphor to use, instead of just the default of
\texttt{it}.

\lispSyntax

\texttt{(a?when \lispVar{conditional} \&body \lispVar{body})}

\lispExamples

\begin{verbatim}
(a?when user (get-user-name)
  (do-something-with-name user)
  (do-more-stuff)
  (format -t "Hello, ~A!~%" user))
\end{verbatim}

\lispMacroSubsection{AWhile}

The \texttt{awhile} macro is an anaphoric variant of \texttt{while}.  This is
based on \cite[p.~191]{on-lisp}.  This is useful if you need to consume input
repeatedly for all input.

\lispSyntax

\texttt{(awhile \lispVar{expression} \&body \lispVar{body})}

\lispExamples

\begin{verbatim}
(awhile (get-input)
  (do-something it)) ; Operate on input for all input.
\end{verbatim}

\lispMacroSubsection{A?While}

The \texttt{a?while} macro is a variant of \texttt{awhile} that allows you to
specify the anaphor to use, instead of just the default \texttt{it}.

\lispSyntax

\texttt{(awhile \lispVar{anaphor} \lispVar{expression} \&body \lispVar{body})}

\lispExamples

\begin{verbatim}
(awhile input (get-input)
  (do-something input)) ; Operate on input for all input.
\end{verbatim}

\lispMacroSubsection{DeleteF}

\TODO

\lispMacroSubsection{Do-While}

\TODO

\lispMacroSubsection{Do-Until}

\TODO

\lispMacroSubsection{For}

\TODO

\lispMacroSubsection{Forever}

\TODO

\lispMacroSubsection{Multicond}

\TODO

\lispMacroSubsection{OpF}

\TODO

\lispMacroSubsection{Swap}

\TODO

\lispMacroSubsection{Swap-Unless}

\TODO

\lispMacroSubsection{Swap-When}

\TODO

\lispMacroSubsection{Until}

\TODO

\lispMacroSubsection{While}

\TODO

\section{Functions}

\lispFunctionSubsection{Compose}

\TODO

\lispFunctionSubsection{Conjoin}

\TODO

\lispFunctionSubsection{Curry}

\TODO

\lispFunctionSubsection{Disjoin}

\TODO

\lispFunctionSubsection{Function-Alias}

\TODO

\lispFunctionSubsection{Operator-To-Function}

\TODO

\lispFunctionSubsection{RCompose}

\TODO

\lispFunctionSubsection{RCurry}

\TODO

\lispFunctionSubsection{Unimplemented}

\TODO

\section{Generics}

\lispGenericSubsection{Duplicate}

\TODO
